{
  "info": {
    "_postman_id": "95b2ae02-a05d-466d-a472-fc8b4927bd81",
    "name": "Feature_comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "36319684"
  },
  "item": [
    {
      "name": "Добавление первого пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(201);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('name');",
              "pm.expect(target).to.have.property('email');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');",
              "    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Katia\",\n    \"email\": \"grommolnia@yandex.ru\"\n}\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/admin/users",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление второго пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(201);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('name');",
              "pm.expect(target).to.have.property('email');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');",
              "    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Nika\",\n    \"email\": \"moemore@mail.ru\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/admin/users",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление третьего пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(201);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('name');",
              "pm.expect(target).to.have.property('email');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');",
              "    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Mia\",\n    \"email\": \"midnight@mail.ru\"\n}\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/admin/users",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление категории",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(201);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Категория должна содержать поля: id, name\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('name');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Хэллоуин\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/admin/categories",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "categories"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление первого события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(201);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('title');",
              "pm.expect(target).to.have.property('annotation');",
              "pm.expect(target).to.have.property('category');",
              "pm.expect(target).to.have.property('paid');",
              "pm.expect(target).to.have.property('eventDate');",
              "pm.expect(target).to.have.property('initiator');",
              "pm.expect(target).to.have.property('description');",
              "pm.expect(target).to.have.property('participantLimit');",
              "pm.expect(target).to.have.property('state');",
              "pm.expect(target).to.have.property('createdOn');",
              "pm.expect(target).to.have.property('location');",
              "pm.expect(target).to.have.property('requestModeration');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"annotation\": \"Будет страшно весело\",\n    \"category\": 1,\n    \"description\": \"Дом с призраками — жилой дом или иное здание, принимаемое за населённое бестелесными духами умерших, которыми могут быть бывшие его жители или фамильяры\",\n    \"eventDate\": \"2025-10-31 22:00:00\",\n    \"location\": {\n    \"lat\": 20.21,\n    \"lon\": 30.31\n  },\n    \"title\": \"Дом с призраками\"\n}\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/users/:userId/events",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Подтверждение первого события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.be.ok;    ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"stateAction\": \"PUBLISH_EVENT\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/events/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление второго события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(201);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('title');",
              "pm.expect(target).to.have.property('annotation');",
              "pm.expect(target).to.have.property('category');",
              "pm.expect(target).to.have.property('paid');",
              "pm.expect(target).to.have.property('eventDate');",
              "pm.expect(target).to.have.property('initiator');",
              "pm.expect(target).to.have.property('description');",
              "pm.expect(target).to.have.property('participantLimit');",
              "pm.expect(target).to.have.property('state');",
              "pm.expect(target).to.have.property('createdOn');",
              "pm.expect(target).to.have.property('location');",
              "pm.expect(target).to.have.property('requestModeration');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"annotation\": \"ББудет страшно и не весело\",\n    \"category\": 1,\n    \"description\": \"Однажды Кэролайн обнаруживает на чердаке секретную комнату с массой мистических предметов. Хозяйка утверждает, что вещи принадлежат бывшим владельцам, которые занимались чёрной магией. Вскоре Кэролайн становится свидетельницей довольно странных и необъяснимых событий и решает во что бы то ни стало разгадать секрет таинственной комнаты.\",\n    \"eventDate\": \"2025-10-31 23:00:00\",\n    \"location\": {\n    \"lat\": 20.21,\n    \"lon\": 40.41\n  },\n    \"title\": \"Ключ от всех дверей\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/users/:userId/events",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Подтверждение второго события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"stateAction\": \"PUBLISH_EVENT\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/events/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление третьего события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(201);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('title');",
              "pm.expect(target).to.have.property('annotation');",
              "pm.expect(target).to.have.property('category');",
              "pm.expect(target).to.have.property('paid');",
              "pm.expect(target).to.have.property('eventDate');",
              "pm.expect(target).to.have.property('initiator');",
              "pm.expect(target).to.have.property('description');",
              "pm.expect(target).to.have.property('participantLimit');",
              "pm.expect(target).to.have.property('state');",
              "pm.expect(target).to.have.property('createdOn');",
              "pm.expect(target).to.have.property('location');",
              "pm.expect(target).to.have.property('requestModeration');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"annotation\": \"Будет Виктор и его невеста\",\n    \"category\": 1,\n    \"description\": \"Виктор приходит в себя в потустороннем мире. Как ни странно, этот мир гораздо веселее, красочнее и жизнерадостнее, чем мир живых. Там Виктор узнаёт историю Эмили. Некогда приезжий обаятельный аристократ соблазнил её и уговорил бежать с ним, но потом убил и забрал семейные драгоценности. Очнувшись и поняв, что она мертва, Эмили поклялась, что будет ждать настоящей любви, — и вот появился Виктор, произнесший слова свадебной клятвы и надевший ей кольцо на палец.\",\n    \"eventDate\": \"2025-10-31 22:00:00\",\n    \"location\": {\n    \"lat\": 10.11,\n    \"lon\": 10.11\n  },\n    \"title\": \"Труп невесты\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/users/:userId/events",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "3"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Подтверждение третьего события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.be.ok;    ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"stateAction\": \"PUBLISH_EVENT\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/events/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "3"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление первого комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const source = JSON.parse(pm.request.body.raw)",
              "",
              "pm.test(\"Status code is 200 or 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
              "});",
              "pm.test(\"Has comment create response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "});",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, `\"text\" must be \"${source.text}\"`).to.eql(source.text);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "",
            "value": "",
            "type": "text",
            "disabled": true
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"Интересно на это посмотреть\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/users/:userId/events/:eventId/comments",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "query": [
            {
              "key": "",
              "value": "",
              "disabled": true
            },
            {
              "key": "",
              "value": null,
              "disabled": true
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "2"
            },
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление второго комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const source = JSON.parse(pm.request.body.raw)",
              "",
              "pm.test(\"Status code is 200 or 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
              "});",
              "pm.test(\"Has comment create response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "});",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, `\"text\" must be \"${source.text}\"`).to.eql(source.text);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"Точно пойду\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/users/:userId/events/:eventId/comments",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "2"
            },
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление третьего комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const source = JSON.parse(pm.request.body.raw)",
              "",
              "pm.test(\"Status code is 200 or 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
              "});",
              "pm.test(\"Has comment create response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "});",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, `\"text\" must be \"${source.text}\"`).to.eql(source.text);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"Не смогу, так как буду в это время в Доме с призраками\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/users/:userId/events/:eventId/comments",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "2"
            },
            {
              "key": "eventId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление четвертого комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const source = JSON.parse(pm.request.body.raw)",
              "",
              "pm.test(\"Status code is 200 or 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
              "});",
              "pm.test(\"Has comment create response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "});",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, `\"text\" must be \"${source.text}\"`).to.eql(source.text);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"Надеюсь стоит того, посмотрю\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/users/:userId/events/:eventId/comments",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "2"
            },
            {
              "key": "eventId",
              "value": "3"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление пятого комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const source = JSON.parse(pm.request.body.raw)",
              "",
              "pm.test(\"Status code is 200 or 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
              "});",
              "pm.test(\"Has comment create response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "});",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, `\"text\" must be \"${source.text}\"`).to.eql(source.text);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"А я уже бывала на таком\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/users/:userId/events/:eventId/comments",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "3"
            },
            {
              "key": "eventId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение всех комментариев к данному событию",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.be.ok;    ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Комментарий должн содержать поля: id, text, authorName, event, created\", function () {",
              "    pm.expect(target[0]).to.have.property('id');",
              "    pm.expect(target[0]).to.have.property('text');",
              "    pm.expect(target[0]).to.have.property('authorName');",
              "    pm.expect(target[0]).to.have.property('event');",
              "    pm.expect(target[0]).to.have.property('created');",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "localhost:8080/events/:eventId/comments",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение комментария по id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.be.ok;    ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "localhost:8080/comments/:commentId",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение всех комментариев этого пользователя на это событие",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.be.ok;    ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Комментарий должн содержать поля: id, text, authorName, event, created\", function () {",
              "    pm.expect(target[0]).to.have.property('id');",
              "    pm.expect(target[0]).to.have.property('text');",
              "    pm.expect(target[0]).to.have.property('authorName');",
              "    pm.expect(target[0]).to.have.property('event');",
              "    pm.expect(target[0]).to.have.property('created');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "localhost:8080/users/:userId/events/:eventId/comments",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "2"
            },
            {
              "key": "eventId",
              "value": "3"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление первого комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const source = JSON.parse(pm.request.body.raw)",
              "",
              "pm.test(\"Status code is 200 or 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
              "});",
              "pm.test(\"Has comment create response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "});",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, `\"text\" must be \"${source.text}\"`).to.eql(source.text);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"ха-ха\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:8080/users/:userId/comments/:commentId",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "2"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление первого комментария ",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "localhost:8080/users/:userId/comments/:commentId",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "2"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление администратором списка комментариев",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "localhost:8080/admin/comments?ids=1, 2",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "ids",
              "value": "1, 2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление администратором всех комментарий этого события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "localhost:8080/admin/comments/events/:eventId",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "comments",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    }
  ]
}